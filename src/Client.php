<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api;

class Client extends Runtime\Client\Client
{
    /**
     * Check the status of Harbor components. This path does not require authentication.
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\OverallHealthStatus|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetHealthInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getHealth(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetHealth($headerParameters), $fetch);
    }

    /**
     * Get the statistic information about the projects and repositories.
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Statistic|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetStatisticUnauthorizedException
     * @throws Exception\GetStatisticInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getStatistic(array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetStatistic($headerParameters), $fetch);
    }

    /**
     * This endpoint returns projects created by Harbor.
     *
     * @param array $queryParameters {
     *
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     * @var string $sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
     * @var string $name the name of project
     * @var bool   $public the project is public or private
     * @var string $owner the name of project owner
     * @var bool   $with_detail Bool value indicating whether return detailed information of the project
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Project[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListProjectsUnauthorizedException
     * @throws Exception\ListProjectsInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listProjects(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListProjects($queryParameters, $headerParameters), $fetch);
    }

    /**
     * This endpoint is used to check if the project name provided already exist.
     *
     * @param array $queryParameters {
     *
     * @var string $project_name Project name for checking exists.
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\HeadProjectNotFoundException
     * @throws Exception\HeadProjectInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function headProject(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\HeadProject($queryParameters, $headerParameters), $fetch);
    }

    /**
     * This endpoint is for user to create a new project.
     *
     * @param Model\ProjectReq $project          new created project
     * @param array            $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Resource-Name-In-Location The flag to indicate whether to return the name of the resource in Location. When X-Resource-Name-In-Location is true, the Location will return the name of the resource.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CreateProjectBadRequestException
     * @throws Exception\CreateProjectUnauthorizedException
     * @throws Exception\CreateProjectConflictException
     * @throws Exception\CreateProjectInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function createProject(Model\ProjectReq $project, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateProject($project, $headerParameters), $fetch);
    }

    /**
     * This endpoint is aimed to delete project by project ID.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteProjectBadRequestException
     * @throws Exception\DeleteProjectForbiddenException
     * @throws Exception\DeleteProjectNotFoundException
     * @throws Exception\DeleteProjectPreconditionFailedException
     * @throws Exception\DeleteProjectInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function deleteProject(string $projectNameOrId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteProject($projectNameOrId, $headerParameters), $fetch);
    }

    /**
     * This endpoint returns specific project information by project ID.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Project|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetProjectUnauthorizedException
     * @throws Exception\GetProjectInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getProject(string $projectNameOrId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetProject($projectNameOrId, $headerParameters), $fetch);
    }

    /**
     * This endpoint is aimed to update the properties of a project.
     *
     * @param string           $projectNameOrId  The name or id of the project
     * @param Model\ProjectReq $project          updates of project
     * @param array            $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateProjectBadRequestException
     * @throws Exception\UpdateProjectUnauthorizedException
     * @throws Exception\UpdateProjectForbiddenException
     * @throws Exception\UpdateProjectNotFoundException
     * @throws Exception\UpdateProjectInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateProject(string $projectNameOrId, Model\ProjectReq $project, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateProject($projectNameOrId, $project, $headerParameters), $fetch);
    }

    /**
     * Get all project member information.
     *
     * @param string $projectNameOrId The name or id of the project
     * @param array  $queryParameters {
     *
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     * @var string $entityname The entity name to search.
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ProjectMemberEntity[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListProjectMembersBadRequestException
     * @throws Exception\ListProjectMembersUnauthorizedException
     * @throws Exception\ListProjectMembersForbiddenException
     * @throws Exception\ListProjectMembersNotFoundException
     * @throws Exception\ListProjectMembersInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listProjectMembers(string $projectNameOrId, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListProjectMembers($projectNameOrId, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Create project member relationship, the member can be one of the user_member and group_member,  The user_member need to specify user_id or username. If the user already exist in harbor DB, specify the user_id,  If does not exist in harbor DB, it will SearchAndOnBoard the user. The group_member need to specify id or ldap_group_dn. If the group already exist in harbor DB. specify the user group's id,  If does not exist, it will SearchAndOnBoard the group.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CreateProjectMemberBadRequestException
     * @throws Exception\CreateProjectMemberUnauthorizedException
     * @throws Exception\CreateProjectMemberForbiddenException
     * @throws Exception\CreateProjectMemberConflictException
     * @throws Exception\CreateProjectMemberInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function createProjectMember(string $projectNameOrId, Model\ProjectMember $projectMember, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateProjectMember($projectNameOrId, $projectMember, $headerParameters), $fetch);
    }

    /**
     * @param string $projectNameOrId  The name or id of the project
     * @param int    $mid              member ID
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteProjectMemberBadRequestException
     * @throws Exception\DeleteProjectMemberUnauthorizedException
     * @throws Exception\DeleteProjectMemberForbiddenException
     * @throws Exception\DeleteProjectMemberInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function deleteProjectMember(string $projectNameOrId, int $mid, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteProjectMember($projectNameOrId, $mid, $headerParameters), $fetch);
    }

    /**
     * Get the project member information.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param int    $mid              The member ID
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\ProjectMemberEntity|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetProjectMemberBadRequestException
     * @throws Exception\GetProjectMemberUnauthorizedException
     * @throws Exception\GetProjectMemberForbiddenException
     * @throws Exception\GetProjectMemberNotFoundException
     * @throws Exception\GetProjectMemberInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getProjectMember(string $projectNameOrId, int $mid, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetProjectMember($projectNameOrId, $mid, $headerParameters), $fetch);
    }

    /**
     * Update project member relationship.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param int    $mid              member ID
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateProjectMemberBadRequestException
     * @throws Exception\UpdateProjectMemberUnauthorizedException
     * @throws Exception\UpdateProjectMemberForbiddenException
     * @throws Exception\UpdateProjectMemberNotFoundException
     * @throws Exception\UpdateProjectMemberInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateProjectMember(string $projectNameOrId, int $mid, Model\RoleRequest $role, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateProjectMember($projectNameOrId, $mid, $role, $headerParameters), $fetch);
    }

    /**
     * Get the metadata of the specific project.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\ListProjectMetadatasBadRequestException
     * @throws Exception\ListProjectMetadatasUnauthorizedException
     * @throws Exception\ListProjectMetadatasForbiddenException
     * @throws Exception\ListProjectMetadatasNotFoundException
     * @throws Exception\ListProjectMetadatasInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listProjectMetadatas(string $projectNameOrId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListProjectMetadatas($projectNameOrId, $headerParameters), $fetch);
    }

    /**
     * Add metadata for the specific project.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\AddProjectMetadatasBadRequestException
     * @throws Exception\AddProjectMetadatasUnauthorizedException
     * @throws Exception\AddProjectMetadatasForbiddenException
     * @throws Exception\AddProjectMetadatasNotFoundException
     * @throws Exception\AddProjectMetadatasConflictException
     * @throws Exception\AddProjectMetadatasInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function addProjectMetadatas(string $projectNameOrId, \stdClass $metadata, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\AddProjectMetadatas($projectNameOrId, $metadata, $headerParameters), $fetch);
    }

    /**
     * Get the specific metadata of the specific project.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param string $metaName         the name of metadata
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\GetProjectMetadataBadRequestException
     * @throws Exception\GetProjectMetadataUnauthorizedException
     * @throws Exception\GetProjectMetadataForbiddenException
     * @throws Exception\GetProjectMetadataNotFoundException
     * @throws Exception\GetProjectMetadataInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getProjectMetadata(string $projectNameOrId, string $metaName, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetProjectMetadata($projectNameOrId, $metaName, $headerParameters), $fetch);
    }

    /**
     * List all authorized repositories.
     *
     * @param array $queryParameters {
     *
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var string $sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Repository[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListAllRepositoriesBadRequestException
     * @throws Exception\ListAllRepositoriesInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listAllRepositories(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListAllRepositories($queryParameters, $headerParameters), $fetch);
    }

    /**
     * List repositories of the specified project.
     *
     * @param string $projectName     The name of the project
     * @param array  $queryParameters {
     *
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var string $sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Repository[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListRepositoriesBadRequestException
     * @throws Exception\ListRepositoriesUnauthorizedException
     * @throws Exception\ListRepositoriesForbiddenException
     * @throws Exception\ListRepositoriesNotFoundException
     * @throws Exception\ListRepositoriesInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listRepositories(string $projectName, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListRepositories($projectName, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Delete the repository specified by name.
     *
     * @param string $projectName      The name of the project
     * @param string $repositoryName   The name of the repository. If it contains slash, encode it twice over with URL encoding. e.g. a/b -> a%2Fb -> a%252Fb
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteRepositoryBadRequestException
     * @throws Exception\DeleteRepositoryUnauthorizedException
     * @throws Exception\DeleteRepositoryForbiddenException
     * @throws Exception\DeleteRepositoryNotFoundException
     * @throws Exception\DeleteRepositoryInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function deleteRepository(string $projectName, string $repositoryName, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteRepository($projectName, $repositoryName, $headerParameters), $fetch);
    }

    /**
     * Get the repository specified by name.
     *
     * @param string $projectName      The name of the project
     * @param string $repositoryName   The name of the repository. If it contains slash, encode it twice over with URL encoding. e.g. a/b -> a%2Fb -> a%252Fb
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Repository|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetRepositoryBadRequestException
     * @throws Exception\GetRepositoryUnauthorizedException
     * @throws Exception\GetRepositoryForbiddenException
     * @throws Exception\GetRepositoryNotFoundException
     * @throws Exception\GetRepositoryInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getRepository(string $projectName, string $repositoryName, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetRepository($projectName, $repositoryName, $headerParameters), $fetch);
    }

    /**
     * Update the repository specified by name.
     *
     * @param string           $projectName      The name of the project
     * @param string           $repositoryName   The name of the repository. If it contains slash, encode it twice over with URL encoding. e.g. a/b -> a%2Fb -> a%252Fb
     * @param Model\Repository $repository       the JSON object of repository
     * @param array            $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateRepositoryBadRequestException
     * @throws Exception\UpdateRepositoryUnauthorizedException
     * @throws Exception\UpdateRepositoryForbiddenException
     * @throws Exception\UpdateRepositoryNotFoundException
     * @throws Exception\UpdateRepositoryInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateRepository(string $projectName, string $repositoryName, Model\Repository $repository, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateRepository($projectName, $repositoryName, $repository, $headerParameters), $fetch);
    }

    /**
     * Get all robot accounts of specified project.
     *
     * @param string $projectNameOrId The name or id of the project
     * @param array  $queryParameters {
     *
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var string $sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Robot[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListRobotV1BadRequestException
     * @throws Exception\ListRobotV1NotFoundException
     * @throws Exception\ListRobotV1InternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listRobotV1(string $projectNameOrId, array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListRobotV1($projectNameOrId, $queryParameters, $headerParameters), $fetch);
    }

    /**
     * Create a robot account.
     *
     * @param string              $projectNameOrId  The name or id of the project
     * @param Model\RobotCreateV1 $robot            the JSON object of a robot account
     * @param array               $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\RobotCreated|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\CreateRobotV1BadRequestException
     * @throws Exception\CreateRobotV1UnauthorizedException
     * @throws Exception\CreateRobotV1ForbiddenException
     * @throws Exception\CreateRobotV1NotFoundException
     * @throws Exception\CreateRobotV1InternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function createRobotV1(string $projectNameOrId, Model\RobotCreateV1 $robot, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateRobotV1($projectNameOrId, $robot, $headerParameters), $fetch);
    }

    /**
     * This endpoint deletes specific robot account information by robot ID.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param int    $robotId          Robot ID
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteRobotV1BadRequestException
     * @throws Exception\DeleteRobotV1UnauthorizedException
     * @throws Exception\DeleteRobotV1ForbiddenException
     * @throws Exception\DeleteRobotV1NotFoundException
     * @throws Exception\DeleteRobotV1InternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function deleteRobotV1(string $projectNameOrId, int $robotId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteRobotV1($projectNameOrId, $robotId, $headerParameters), $fetch);
    }

    /**
     * This endpoint returns specific robot account information by robot ID.
     *
     * @param string $projectNameOrId  The name or id of the project
     * @param int    $robotId          Robot ID
     * @param array  $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\Robot|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetRobotByIDV1UnauthorizedException
     * @throws Exception\GetRobotByIDV1ForbiddenException
     * @throws Exception\GetRobotByIDV1NotFoundException
     * @throws Exception\GetRobotByIDV1InternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getRobotByIDV1(string $projectNameOrId, int $robotId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetRobotByIDV1($projectNameOrId, $robotId, $headerParameters), $fetch);
    }

    /**
     * Used to disable/enable a specified robot account.
     *
     * @param string      $projectNameOrId  The name or id of the project
     * @param int         $robotId          Robot ID
     * @param Model\Robot $robot            the JSON object of a robot account
     * @param array       $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     * @var bool   $X-Is-Resource-Name The flag to indicate whether the parameter which supports both name and id in the path is the name of the resource. When the X-Is-Resource-Name is false and the parameter can be converted to an integer, the parameter will be as an id, otherwise, it will be as a name.
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateRobotV1BadRequestException
     * @throws Exception\UpdateRobotV1UnauthorizedException
     * @throws Exception\UpdateRobotV1ForbiddenException
     * @throws Exception\UpdateRobotV1NotFoundException
     * @throws Exception\UpdateRobotV1ConflictException
     * @throws Exception\UpdateRobotV1InternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateRobotV1(string $projectNameOrId, int $robotId, Model\Robot $robot, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateRobotV1($projectNameOrId, $robotId, $robot, $headerParameters), $fetch);
    }

    /**
     * @param array $queryParameters {
     *
     * @var string $q Query string to query resources. Supported query patterns are "exact match(k=v)", "fuzzy match(k=~v)", "range(k=[min~max])", "list with union releationship(k={v1 v2 v3})" and "list with intersetion relationship(k=(v1 v2 v3))". The value of range and list can be string(enclosed by " or '), integer or time(in format "2020-04-09 02:36:00"). All of these query patterns should be put in the query string "q=xxx" and splitted by ",". e.g. q=k1=v1,k2=~v2,k3=[min~max]
     * @var string $sort Sort the resource list in ascending or descending order. e.g. sort by field1 in ascending order and field2 in descending order with "sort=field1,-field2"
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\UserResp[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\ListUsersUnauthorizedException
     * @throws Exception\ListUsersForbiddenException
     * @throws Exception\ListUsersInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function listUsers(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\ListUsers($queryParameters, $headerParameters), $fetch);
    }

    /**
     * This API can be used only when the authentication mode is for local DB.  When self registration is disabled.
     *
     * @param Model\UserCreationReq $userReq          The new user
     * @param array                 $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\CreateUserBadRequestException
     * @throws Exception\CreateUserUnauthorizedException
     * @throws Exception\CreateUserForbiddenException
     * @throws Exception\CreateUserConflictException
     * @throws Exception\CreateUserInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function createUser(Model\UserCreationReq $userReq, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\CreateUser($userReq, $headerParameters), $fetch);
    }

    /**
     * This endpoint is to search the users by username.  It's open for all authenticated requests.
     *
     * @param array $queryParameters {
     *
     * @var int    $page The page number
     * @var int    $page_size The size of per page
     * @var string $username Username for filtering results.
     *             }
     *
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\UserSearchRespItem[]|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\SearchUsersUnauthorizedException
     * @throws Exception\SearchUsersInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function searchUsers(array $queryParameters = [], array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\SearchUsers($queryParameters, $headerParameters), $fetch);
    }

    /**
     * This endpoint let administrator of Harbor mark a registered user as removed.It actually won't be deleted from DB.
     *
     * @param int   $userId           user ID for marking as to be removed
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\DeleteUserUnauthorizedException
     * @throws Exception\DeleteUserForbiddenException
     * @throws Exception\DeleteUserNotFoundException
     * @throws Exception\DeleteUserInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function deleteUser(int $userId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\DeleteUser($userId, $headerParameters), $fetch);
    }

    /**
     * @param array $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return Model\UserResp|\Psr\Http\Message\ResponseInterface
     *
     * @throws Exception\GetUserUnauthorizedException
     * @throws Exception\GetUserForbiddenException
     * @throws Exception\GetUserNotFoundException
     * @throws Exception\GetUserInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function getUser(int $userId, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\GetUser($userId, $headerParameters), $fetch);
    }

    /**
     * @param int               $userId           Registered user ID
     * @param Model\UserProfile $profile          only email, realname and comment can be modified
     * @param array             $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateUserProfileUnauthorizedException
     * @throws Exception\UpdateUserProfileForbiddenException
     * @throws Exception\UpdateUserProfileNotFoundException
     * @throws Exception\UpdateUserProfileInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateUserProfile(int $userId, Model\UserProfile $profile, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateUserProfile($userId, $profile, $headerParameters), $fetch);
    }

    /**
     * This endpoint is for user to update password. Users with the admin role can change any user's password. Regular users can change only their own password.
     *
     * @param Model\PasswordReq $password         password to be updated, the attribute 'old_password' is optional when the API is called by the system administrator
     * @param array             $headerParameters {
     *
     * @var string $X-Request-Id An unique ID for the request
     *             }
     *
     * @param string $fetch Fetch mode to use (can be OBJECT or RESPONSE)
     *
     * @return \Psr\Http\Message\ResponseInterface|null
     *
     * @throws Exception\UpdateUserPasswordBadRequestException
     * @throws Exception\UpdateUserPasswordUnauthorizedException
     * @throws Exception\UpdateUserPasswordForbiddenException
     * @throws Exception\UpdateUserPasswordInternalServerErrorException
     * @throws Exception\UnexpectedStatusCodeException
     */
    public function updateUserPassword(int $userId, Model\PasswordReq $password, array $headerParameters = [], string $fetch = self::FETCH_OBJECT)
    {
        return $this->executeEndpoint(new Endpoint\UpdateUserPassword($userId, $password, $headerParameters), $fetch);
    }

    public static function create($httpClient = null, array $additionalPlugins = [], array $additionalNormalizers = [])
    {
        if (null === $httpClient) {
            $httpClient = \Http\Discovery\Psr18ClientDiscovery::find();
            $plugins = [];
            if (count($additionalPlugins) > 0) {
                $plugins = array_merge($plugins, $additionalPlugins);
            }
            $httpClient = new \Http\Client\Common\PluginClient($httpClient, $plugins);
        }
        $requestFactory = \Http\Discovery\Psr17FactoryDiscovery::findRequestFactory();
        $streamFactory = \Http\Discovery\Psr17FactoryDiscovery::findStreamFactory();
        $normalizers = [new \Symfony\Component\Serializer\Normalizer\ArrayDenormalizer(), new Normalizer\JaneObjectNormalizer()];
        if (count($additionalNormalizers) > 0) {
            $normalizers = array_merge($normalizers, $additionalNormalizers);
        }
        $serializer = new \Symfony\Component\Serializer\Serializer($normalizers, [new \Symfony\Component\Serializer\Encoder\JsonEncoder(new \Symfony\Component\Serializer\Encoder\JsonEncode(), new \Symfony\Component\Serializer\Encoder\JsonDecode(['json_decode_associative' => true]))]);

        return new static($httpClient, $requestFactory, $serializer, $streamFactory);
    }
}
