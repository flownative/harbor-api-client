<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Normalizer;

use Flownative\Harbor\Api\Runtime\Normalizer\CheckArray;
use Flownative\Harbor\Api\Runtime\Normalizer\ValidatorTrait;
use Jane\Component\JsonSchemaRuntime\Reference;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\DenormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\DenormalizerInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareInterface;
use Symfony\Component\Serializer\Normalizer\NormalizerAwareTrait;
use Symfony\Component\Serializer\Normalizer\NormalizerInterface;

class UserRespNormalizer implements DenormalizerInterface, NormalizerInterface, DenormalizerAwareInterface, NormalizerAwareInterface
{
    use DenormalizerAwareTrait;
    use NormalizerAwareTrait;
    use CheckArray;
    use ValidatorTrait;

    public function supportsDenormalization(mixed $data, string $type, ?string $format = null, array $context = []): bool
    {
        return $type === \Flownative\Harbor\Api\Model\UserResp::class;
    }

    public function supportsNormalization(mixed $data, ?string $format = null, array $context = []): bool
    {
        return is_object($data) && get_class($data) === \Flownative\Harbor\Api\Model\UserResp::class;
    }

    public function denormalize(mixed $data, string $type, ?string $format = null, array $context = []): mixed
    {
        if (isset($data['$ref'])) {
            return new Reference($data['$ref'], $context['document-origin']);
        }
        if (isset($data['$recursiveRef'])) {
            return new Reference($data['$recursiveRef'], $context['document-origin']);
        }
        $object = new \Flownative\Harbor\Api\Model\UserResp();
        if (\array_key_exists('sysadmin_flag', $data) && \is_int($data['sysadmin_flag'])) {
            $data['sysadmin_flag'] = (bool) $data['sysadmin_flag'];
        }
        if (\array_key_exists('admin_role_in_auth', $data) && \is_int($data['admin_role_in_auth'])) {
            $data['admin_role_in_auth'] = (bool) $data['admin_role_in_auth'];
        }
        if (null === $data || false === \is_array($data)) {
            return $object;
        }
        if (\array_key_exists('email', $data)) {
            $object->setEmail($data['email']);
        }
        if (\array_key_exists('realname', $data)) {
            $object->setRealname($data['realname']);
        }
        if (\array_key_exists('comment', $data)) {
            $object->setComment($data['comment']);
        }
        if (\array_key_exists('user_id', $data)) {
            $object->setUserId($data['user_id']);
        }
        if (\array_key_exists('username', $data)) {
            $object->setUsername($data['username']);
        }
        if (\array_key_exists('sysadmin_flag', $data)) {
            $object->setSysadminFlag($data['sysadmin_flag']);
        }
        if (\array_key_exists('admin_role_in_auth', $data)) {
            $object->setAdminRoleInAuth($data['admin_role_in_auth']);
        }
        if (\array_key_exists('oidc_user_meta', $data)) {
            $object->setOidcUserMeta($this->denormalizer->denormalize($data['oidc_user_meta'], \Flownative\Harbor\Api\Model\OIDCUserInfo::class, 'json', $context));
        }
        if (\array_key_exists('creation_time', $data)) {
            $object->setCreationTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['creation_time']));
        }
        if (\array_key_exists('update_time', $data)) {
            $object->setUpdateTime(\DateTime::createFromFormat('Y-m-d\TH:i:s.vp', $data['update_time']));
        }

        return $object;
    }

    public function normalize(mixed $data, ?string $format = null, array $context = []): array|string|int|float|bool|\ArrayObject|null
    {
        $dataArray = [];
        if ($data->isInitialized('email') && null !== $data->getEmail()) {
            $dataArray['email'] = $data->getEmail();
        }
        if ($data->isInitialized('realname') && null !== $data->getRealname()) {
            $dataArray['realname'] = $data->getRealname();
        }
        if ($data->isInitialized('comment') && null !== $data->getComment()) {
            $dataArray['comment'] = $data->getComment();
        }
        if ($data->isInitialized('userId') && null !== $data->getUserId()) {
            $dataArray['user_id'] = $data->getUserId();
        }
        if ($data->isInitialized('username') && null !== $data->getUsername()) {
            $dataArray['username'] = $data->getUsername();
        }
        if ($data->isInitialized('sysadminFlag') && null !== $data->getSysadminFlag()) {
            $dataArray['sysadmin_flag'] = $data->getSysadminFlag();
        }
        if ($data->isInitialized('adminRoleInAuth') && null !== $data->getAdminRoleInAuth()) {
            $dataArray['admin_role_in_auth'] = $data->getAdminRoleInAuth();
        }
        if ($data->isInitialized('oidcUserMeta') && null !== $data->getOidcUserMeta()) {
            $dataArray['oidc_user_meta'] = $this->normalizer->normalize($data->getOidcUserMeta(), 'json', $context);
        }
        if ($data->isInitialized('creationTime') && null !== $data->getCreationTime()) {
            $dataArray['creation_time'] = $data->getCreationTime()->format('Y-m-d\TH:i:s.vp');
        }
        if ($data->isInitialized('updateTime') && null !== $data->getUpdateTime()) {
            $dataArray['update_time'] = $data->getUpdateTime()->format('Y-m-d\TH:i:s.vp');
        }

        return $dataArray;
    }

    public function getSupportedTypes(?string $format = null): array
    {
        return [\Flownative\Harbor\Api\Model\UserResp::class => false];
    }
}
