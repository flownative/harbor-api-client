<?php

declare(strict_types=1);

/*
 * This file has been auto generated by Jane,
 *
 * Do no edit it directly.
 */

namespace Flownative\Harbor\Api\Model;

class Project
{
    /**
     * @var array
     */
    protected $initialized = [];

    public function isInitialized($property): bool
    {
        return array_key_exists($property, $this->initialized);
    }
    /**
     * Project ID.
     *
     * @var int
     */
    protected $projectId;
    /**
     * The owner ID of the project always means the creator of the project.
     *
     * @var int
     */
    protected $ownerId;
    /**
     * The name of the project.
     *
     * @var string
     */
    protected $name;
    /**
     * The ID of referenced registry when the project is a proxy cache project.
     *
     * @var int
     */
    protected $registryId;
    /**
     * The creation time of the project.
     *
     * @var \DateTimeInterface
     */
    protected $creationTime;
    /**
     * The update time of the project.
     *
     * @var \DateTimeInterface
     */
    protected $updateTime;
    /**
     * A deletion mark of the project.
     *
     * @var bool
     */
    protected $deleted;
    /**
     * The owner name of the project.
     *
     * @var string
     */
    protected $ownerName;
    /**
     * Correspond to the UI about whether the project's publicity is  updatable (for UI).
     *
     * @var bool
     */
    protected $togglable;
    /**
     * The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.
     *
     * @var int
     */
    protected $currentUserRoleId;
    /**
     * The list of role ID of the current user who triggered the API (for UI).
     *
     * @var list<int>
     */
    protected $currentUserRoleIds;
    /**
     * The number of the repositories under this project.
     *
     * @var int
     */
    protected $repoCount;
    /**
     * @var ProjectMetadata
     */
    protected $metadata;
    /**
     * The CVE Allowlist for system or project.
     *
     * @var CVEAllowlist
     */
    protected $cveAllowlist;

    /**
     * Project ID.
     */
    public function getProjectId(): int
    {
        return $this->projectId;
    }

    /**
     * Project ID.
     */
    public function setProjectId(int $projectId): self
    {
        $this->initialized['projectId'] = true;
        $this->projectId = $projectId;

        return $this;
    }

    /**
     * The owner ID of the project always means the creator of the project.
     */
    public function getOwnerId(): int
    {
        return $this->ownerId;
    }

    /**
     * The owner ID of the project always means the creator of the project.
     */
    public function setOwnerId(int $ownerId): self
    {
        $this->initialized['ownerId'] = true;
        $this->ownerId = $ownerId;

        return $this;
    }

    /**
     * The name of the project.
     */
    public function getName(): string
    {
        return $this->name;
    }

    /**
     * The name of the project.
     */
    public function setName(string $name): self
    {
        $this->initialized['name'] = true;
        $this->name = $name;

        return $this;
    }

    /**
     * The ID of referenced registry when the project is a proxy cache project.
     */
    public function getRegistryId(): int
    {
        return $this->registryId;
    }

    /**
     * The ID of referenced registry when the project is a proxy cache project.
     */
    public function setRegistryId(int $registryId): self
    {
        $this->initialized['registryId'] = true;
        $this->registryId = $registryId;

        return $this;
    }

    /**
     * The creation time of the project.
     */
    public function getCreationTime(): \DateTimeInterface
    {
        return $this->creationTime;
    }

    /**
     * The creation time of the project.
     */
    public function setCreationTime(\DateTimeInterface $creationTime): self
    {
        $this->initialized['creationTime'] = true;
        $this->creationTime = $creationTime;

        return $this;
    }

    /**
     * The update time of the project.
     */
    public function getUpdateTime(): \DateTimeInterface
    {
        return $this->updateTime;
    }

    /**
     * The update time of the project.
     */
    public function setUpdateTime(\DateTimeInterface $updateTime): self
    {
        $this->initialized['updateTime'] = true;
        $this->updateTime = $updateTime;

        return $this;
    }

    /**
     * A deletion mark of the project.
     */
    public function getDeleted(): bool
    {
        return $this->deleted;
    }

    /**
     * A deletion mark of the project.
     */
    public function setDeleted(bool $deleted): self
    {
        $this->initialized['deleted'] = true;
        $this->deleted = $deleted;

        return $this;
    }

    /**
     * The owner name of the project.
     */
    public function getOwnerName(): string
    {
        return $this->ownerName;
    }

    /**
     * The owner name of the project.
     */
    public function setOwnerName(string $ownerName): self
    {
        $this->initialized['ownerName'] = true;
        $this->ownerName = $ownerName;

        return $this;
    }

    /**
     * Correspond to the UI about whether the project's publicity is  updatable (for UI).
     */
    public function getTogglable(): bool
    {
        return $this->togglable;
    }

    /**
     * Correspond to the UI about whether the project's publicity is  updatable (for UI).
     */
    public function setTogglable(bool $togglable): self
    {
        $this->initialized['togglable'] = true;
        $this->togglable = $togglable;

        return $this;
    }

    /**
     * The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.
     */
    public function getCurrentUserRoleId(): int
    {
        return $this->currentUserRoleId;
    }

    /**
     * The role ID with highest permission of the current user who triggered the API (for UI).  This attribute is deprecated and will be removed in future versions.
     */
    public function setCurrentUserRoleId(int $currentUserRoleId): self
    {
        $this->initialized['currentUserRoleId'] = true;
        $this->currentUserRoleId = $currentUserRoleId;

        return $this;
    }

    /**
     * The list of role ID of the current user who triggered the API (for UI).
     *
     * @return list<int>
     */
    public function getCurrentUserRoleIds(): array
    {
        return $this->currentUserRoleIds;
    }

    /**
     * The list of role ID of the current user who triggered the API (for UI).
     *
     * @param list<int> $currentUserRoleIds
     */
    public function setCurrentUserRoleIds(array $currentUserRoleIds): self
    {
        $this->initialized['currentUserRoleIds'] = true;
        $this->currentUserRoleIds = $currentUserRoleIds;

        return $this;
    }

    /**
     * The number of the repositories under this project.
     */
    public function getRepoCount(): int
    {
        return $this->repoCount;
    }

    /**
     * The number of the repositories under this project.
     */
    public function setRepoCount(int $repoCount): self
    {
        $this->initialized['repoCount'] = true;
        $this->repoCount = $repoCount;

        return $this;
    }

    public function getMetadata(): ProjectMetadata
    {
        return $this->metadata;
    }

    public function setMetadata(ProjectMetadata $metadata): self
    {
        $this->initialized['metadata'] = true;
        $this->metadata = $metadata;

        return $this;
    }

    /**
     * The CVE Allowlist for system or project.
     */
    public function getCveAllowlist(): CVEAllowlist
    {
        return $this->cveAllowlist;
    }

    /**
     * The CVE Allowlist for system or project.
     */
    public function setCveAllowlist(CVEAllowlist $cveAllowlist): self
    {
        $this->initialized['cveAllowlist'] = true;
        $this->cveAllowlist = $cveAllowlist;

        return $this;
    }
}
